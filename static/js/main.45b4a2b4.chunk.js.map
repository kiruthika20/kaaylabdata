{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","probs","searchbox","state","Items","columns","dataField","text","getItems","a","axios","method","url","then","data","console","log","setState","e","target","value","this","filter","d","status","toLowerCase","indexOf","className","type","onChange","onChangeHandle","bind","placeholder","style","float","width","borderColor","keyField","stripped","hover","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAmGeA,G,yDAzDb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAnCRC,UAAU,GAkCQ,EAjClBC,MAAM,CACJC,MAAM,GACNC,QAAQ,CACN,CACAC,UAAU,aACVC,KAAK,UAEP,CACAD,UAAU,eACVC,KAAK,gBAEL,CACAD,UAAU,cACVC,KAAK,eAEP,CACAD,UAAU,aACVC,KAAK,cAEH,CACAD,UAAU,WACVC,KAAK,YAEH,CACAD,UAAU,eACVC,KAAK,gBAEH,CACAD,UAAU,SACVC,KAAK,YAIO,EAKlBC,SALkB,sBAKT,4BAAAC,EAAA,+EAEYC,IAAM,CACrBC,OAAO,MACPC,IAAI,qDACDC,MAAK,qBAAEC,KACLA,QANF,OAECA,EAFD,OAOHC,QAAQC,IAAIF,GACZ,EAAKZ,UAAUY,EACf,EAAKG,SAAS,CAACb,MAAMU,IATlB,gDAaLC,QAAQC,IAAR,MAbK,yDAHP,EAAKR,WAFW,E,2DAqBHU,GACbH,QAAQC,IAAIE,EAAEC,OAAOC,OACrB,IAAIlB,EAAUmB,KAAKnB,UAAUoB,QAAO,SAACC,GAInC,OAHAR,QAAQC,IAAIO,IAGiC,IAD7BA,EAAEC,OAAOC,cACPC,QAAQR,EAAEC,OAAOC,UAErCC,KAAKJ,SAAS,CAACb,MAAMF,M,+BAIpB,OACE,sBAAKyB,UAAU,MAAf,UACA,oBAAIA,UAAU,MAAd,8DACA,uBACA,uBAAOC,KAAK,OAAOR,MAAOC,KAAKlB,MAAMiB,MAAOS,SAAUR,KAAKS,eAAeC,KAAKV,MAAOW,YAAY,WAAWC,MAC3G,CAACC,MAAM,QAAQC,MAAM,MAAMC,YAAY,UAEvC,cAAC,IAAD,CACA/B,QAASgB,KAAKlB,MAAME,QACpBgC,SAAS,KACTvB,KAAMO,KAAKlB,MAAMC,MACjBkC,UAAQ,EACRC,OAAK,W,GAhFKC,cCKJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.45b4a2b4.chunk.js","sourcesContent":["import React, { Component} from \"react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport axios from \"axios\";\n\nimport './App.css';\n\n\nclass App extends  Component{\n  searchbox=[ ];\n  state={\n    Items:[],\n    columns:[\n      {\n      dataField:'project_id',\n      text:'userId',\n      },\n    {\n    dataField:'project_code',\n    text:'Project code',\n   },\n    {\n    dataField:'description',\n    text:'Description',\n  },\n  {\n  dataField:'start_date',\n  text:'Start date',\n},\n    {\n    dataField:'end_date',\n    text:'End date',\n    },\n      {\n      dataField:'company_name',\n      text:'Company name',\n      }, \n        {\n        dataField:'status',\n        text:'Status',\n      }]\n  }\n \n  constructor(probs){\n    super(probs)\n    this.getItems();\n    \n  }\n  getItems=async()=>{\n    try{\n        let data=await axios({\n        method:'get',\n        url:'http://timeapi.kaaylabs.com/api/v1/project_view/'\n        }).then(({data})=>\n        data.data)\n        console.log(data);\n        this.searchbox=data;\n        this.setState({Items:data});\n    }\n    catch(err)\n    {\n      console.log(err);\n    }\n  }\n  onChangeHandle(e){\n    console.log(e.target.value);\n    let searchbox=this.searchbox.filter((d)=>{\n      console.log(d);\n      \n      let serchValue =d.status.toLowerCase();\n      return serchValue.indexOf(e.target.value)!==-1;\n    });\n    this.setState({Items:searchbox})\n  }\n  render()\n   {\n     return(\n       <div className=\"App\">\n       <h2 className=\"App\"> Search the values of Status in the search input</h2>\n       <br></br>\n       <input type=\"text\" value={this.state.value} onChange={this.onChangeHandle.bind(this)} placeholder=\"search..\" style={\n         {float:'right',width:'25%',borderColor:'#000'}\n       } />\n         <BootstrapTable\n         columns={this.state.columns} \n         keyField=\"id\"\n         data={this.state.Items}\n         stripped\n         hover\n         />\n         \n       </div>\n     )\n   }\n  \n\n  \n\n\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}